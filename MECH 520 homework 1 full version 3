% Script: Evaluate_Spring_Displacements_Node4Fixed_DisplayAll_WithMapping.m
% This script computes and displays:
%   - The mapping matrix (global node connectivity for each element)
%   - The stiffness matrix for each case (Case 1, 2, and 3)
%   - The applied force matrix (F)
%   - The computed full displacement matrix (d)
%   - The final displacement values for nodes 1, 2, and 3
%
% Assumptions:
%   - There are 4 nodes in the system and 3 elements.
%   - The mapping matrix is defined as follows:
%         Element 1: connects Node 1 and Node 2
%         Element 2: connects Node 2 and Node 3
%         Element 3: connects Node 3 and Node 4
%   - Node 4 is fixed (d(4)=0).
%   - The applied force vectors are:
%         Case 1: F = [100; 0; 0; 0]
%         Case 2: F = [400; 0; 0; 0]
%         Case 3: F = [1000; 0; 0; 0]

clc;
clear;
close all;

Mapping Matrix
Each row corresponds to an element. The two entries are the global node numbers for that element's local degrees-of-freedom.
mapping_matrix = [1 2;
    2 3;
    3 4];

disp('==================================================');
disp('Mapping Matrix (Global Node Connectivity):');
disp(mapping_matrix);
disp('==================================================');

CASE 1: P = 100 N
Full 4x4 stiffness matrix for Case 1:
K1 = [ 1000,  -1000,      0,       0;
    -1000,  6000,   -5000,      0;
    0, -5000,  25000, -20000;
    0,      0, -20000,  20000 ];

% Applied force matrix for Case 1:
F1_full = [100; 0; 0; 0];

% Extract the reduced system for the free nodes (nodes 1, 2, and 3):
K1_red = K1(1:3, 1:3);
F1_red = F1_full(1:3);

% Solve for displacements for nodes 1-3:
d1_free = K1_red \ F1_red;
% Reconstruct the full displacement matrix (with Node 4 fixed, d(4)=0):
d1 = [d1_free; 0];

% Compute the full force vector (this shows the reaction at the fixed node):
F1_calc = K1 * d1;

disp('==================================================');
disp('CASE 1 (P = 100 N)');
disp('Stiffness Matrix (K1):');
disp(K1);
disp('Force Matrix (F1):');
disp(F1_full);
disp('Displacement Matrix (d1):');
disp(d1);
disp('Final displacement values for Nodes 1, 2, and 3:');
disp(d1(1:3));
disp('Computed full F = K1*d1 (including reaction at Node 4):');
disp(F1_calc);
disp('==================================================');

CASE 2: P = 400 N
Full 4x4 stiffness matrix for Case 2:
K2 = [ 1000,  -1000,      0,       0;
    -1000,  6000,   -5000,      0;
    0, -5000,  15000, -10000;
    0,      0, -10000,  10000 ];

% Applied force matrix for Case 2:
F2_full = [400; 0; 0; 0];

% Extract the reduced system for the free nodes (nodes 1, 2, and 3):
K2_red = K2(1:3, 1:3);
F2_red = F2_full(1:3);

% Solve for displacements for nodes 1-3:
d2_free = K2_red \ F2_red;
d2 = [d2_free; 0];

% Compute the full force vector:
F2_calc = K2 * d2;

disp('==================================================');
disp('CASE 2 (P = 400 N)');
disp('Stiffness Matrix (K2):');
disp(K2);
disp('Force Matrix (F2):');
disp(F2_full);
disp('Displacement Matrix (d2):');
disp(d2);
disp('Final displacement values for Nodes 1, 2, and 3:');
disp(d2(1:3));
disp('Computed full F = K2*d2 (including reaction at Node 4):');
disp(F2_calc);
disp('==================================================');

CASE 3: P = 1000 N
For Case 3, the stiffness matrix is the same as in Case 1.
K3 = K1;
F3_full = [1000; 0; 0; 0];

% Extract the reduced system for the free nodes (nodes 1, 2, and 3):
K3_red = K3(1:3, 1:3);
F3_red = F3_full(1:3);

% Solve for displacements for nodes 1-3:
d3_free = K3_red \ F3_red;
d3 = [d3_free; 0];

% Compute the full force vector:
F3_calc = K3 * d3;

disp('==================================================');
disp('CASE 3 (P = 1000 N)');
disp('Stiffness Matrix (K3):');
disp(K3);
disp('Force Matrix (F3):');
disp(F3_full);
disp('Displacement Matrix (d3):');
disp(d3);
disp('Final displacement values for Nodes 1, 2, and 3:');
disp(d3(1:3));
disp('Computed full F = K3*d3 (including reaction at Node 4):');
disp(F3_calc);
disp('==================================================');
